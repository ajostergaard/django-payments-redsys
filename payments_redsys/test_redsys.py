import base64
import json
from decimal import Decimal
from unittest.mock import MagicMock, Mock, patch

import pytest
from django.test import RequestFactory, TestCase
from hamcrest import assert_that, has_entries
from payments import get_payment_model

from payments_redsys import RedsysProvider, compare_signatures, compute_signature
from sample.models import Payment

redsys_config = {
    "language": "003",
    "currency": "EUR",
    # redsys test environment:
    # https://pagosonline.redsys.es/desarrolladores-inicio/integrate-con-nosotros/tarjetas-y-entornos-de-prueba/
    "merchant_code": "999008881",
    "terminal": "001",
    "shared_secret": "sq7HjrUOBfKmC576ILgskD5srU870gJ7",
}


def redsys_response_factory():
    return {
        "Ds_Date": "20%2F04%2F2025",
        "Ds_Hour": "13%3A55",
        "Ds_SecurePayment": "1",
        "Ds_Amount": "500",
        "Ds_Currency": "978",
        "Ds_Order": "REDSYS=TEST%3A000066",
        "Ds_Autogenerated_Order": "03169b0fc8dd",
        "Ds_MerchantCode": "999008881",
        "Ds_Terminal": "001",
        "Ds_Response": "0000",
        "Ds_TransactionType": "0",
        "Ds_MerchantData": "",
        "Ds_AuthorisationCode": "123337",
        "Ds_Card_Number": "454881******0003",
        "Ds_ConsumerLanguage": "3",
        "Ds_Card_Country": "724",
        "Ds_Card_Brand": "1",
        "Ds_ProcessedPayMethod": "78",
        "Ds_ECI": "05",
        "Ds_Response_Description": "OPERACION+AUTORIZADA",
        "Ds_Control_1745150156325": "1745150156325",
    }


def encode_response(redsys_response):
    return base64.b64encode(json.dumps(redsys_response).encode())


ExamplePayment = get_payment_model()


class TestRedsysProvider(TestCase):

    @classmethod
    def setUpTestData(cls):
        cls.redsys = RedsysProvider(**redsys_config)
        cls.factory = RequestFactory()
        cls.payment: Payment = ExamplePayment.objects.create(
            pk=1,
            total=Decimal("10.0"),
            currency="EUR",
            variant="redsys",
            captured_amount=Decimal("5.0"),
        )

    def test_get_form(self):
        form = self.redsys.get_form(self.payment)

        assert form.action == "https://sis-t.redsys.es:25443/sis/realizarPago"
        assert form.method == "post"

        fields = form.fields
        assert len(fields) == (3)
        assert fields["Ds_SignatureVersion"].initial == "HMAC_SHA256_V1"
        data = json.loads(
            base64.b64decode(fields["Ds_MerchantParameters"].initial).decode("ascii")
        )
        process_url = f"http://localhost:8000/payments/process/{self.payment.token}/"
        assert_that(
            data,
            has_entries(
                {
                    "DS_MERCHANT_AMOUNT": "1000",
                    "DS_MERCHANT_ORDER": "SMPL000001",
                    "DS_MERCHANT_MERCHANTCODE": redsys_config["merchant_code"],
                    "DS_MERCHANT_DIRECTPAYMENT": "FALSE",
                    "DS_MERCHANT_CURRENCY": "978",
                    "DS_MERCHANT_TRANSACTIONTYPE": "0",
                    "DS_MERCHANT_TERMINAL": redsys_config["terminal"],
                    "DS_MERCHANT_MERCHANTURL": process_url,
                    "DS_MERCHANT_URLOK": process_url,
                    "DS_MERCHANT_URLKO": process_url,
                    "Ds_Merchant_ConsumerLanguage": "003",
                }
            ),
        )

    @patch("payments_redsys.compare_signatures", Mock(return_value=True))
    def test_process_data_success(self):
        redsys_response = redsys_response_factory()
        merchant_params = encode_response(redsys_response)
        signature = compute_signature(
            str(redsys_response["Ds_Order"]),
            merchant_params,
            self.redsys.shared_secret,
        )

        request = self.factory.get(
            "/",
            data={
                "Ds_SignatureVersion": "HMAC_SHA256_V1",
                "Ds_MerchantParameters": merchant_params,
                "Ds_Signature": signature,
            },
        )

        result = self.redsys.process_data(self.payment, request)

        assert result.status_code == 302
        assert result.url == f"http://localhost:8000/{self.payment.pk}/success"
        self.payment.refresh_from_db()
        assert self.payment.status == "confirmed"

    @patch("payments_redsys.compare_signatures", Mock(return_value=True))
    def test_process_data_rejected(self):
        redsys_response = redsys_response_factory()
        redsys_response["Ds_Response"] = "190"  # denied
        merchant_params = encode_response(redsys_response)
        signature = compute_signature(
            str(redsys_response["Ds_Order"]),
            merchant_params,
            self.redsys.shared_secret,
        )

        request = self.factory.get(
            "/",
            data={
                "Ds_SignatureVersion": "HMAC_SHA256_V1",
                "Ds_MerchantParameters": merchant_params,
                "Ds_Signature": signature,
            },
        )

        result = self.redsys.process_data(self.payment, request)

        assert result.status_code == 302
        assert result.url == f"http://localhost:8000/{self.payment.pk}/failure"
        self.payment.refresh_from_db()
        assert self.payment.status == "rejected"

    @patch("payments_redsys.compare_signatures", Mock(return_value=True))
    @patch("payments_redsys.requests.post")
    def test_refund_mock(self, post: MagicMock):
        post.return_value.content = json.dumps(
            {
                "Ds_SignatureVersion": "HMAC_SHA256_V1",
                "Ds_MerchantParameters": base64.b64encode(
                    json.dumps({"Ds_Response": "0400"}).encode()
                ).decode(),
                "Ds_Signature": "...",
            }
        ).encode("utf-8")
        refund_amount = Decimal("5.0")

        result = self.redsys.refund(self.payment, refund_amount)

        assert result == refund_amount
        post.assert_called_once_with(
            "https://sis-t.redsys.es:25443/sis/rest/trataPeticionREST",
            json={
                "Ds_SignatureVersion": "HMAC_SHA256_V1",
                "Ds_MerchantParameters": "eyJEU19NRVJDSEFOVF9BTU9VTlQiOiAiNTAwIiwgIkRTX01FUkNIQU5UX0NVUlJFTkNZIjogIjk3OCIsICJEU19NRVJDSEFOVF9NRVJDSEFOVENPREUiOiAiOTk5MDA4ODgxIiwgIkRTX01FUkNIQU5UX09SREVSIjogIlNNUEwwMDAwMDEiLCAiRFNfTUVSQ0hBTlRfVEVSTUlOQUwiOiAiMDAxIiwgIkRTX01FUkNIQU5UX1RSQU5TQUNUSU9OVFlQRSI6ICIzIn0=",
                "Ds_Signature": "audTCtmyZ758ilFlz8JfbNywKXE1hoHTs420jbhaScU=",
            },
        )

    @pytest.mark.skip("Can only test manually with a prior valid order number")
    def test_refund_live(self):
        amount = self.redsys.refund(self.payment, Decimal("5"))

        assert amount == 500


def test_compute_signature():
    signature = compute_signature(
        "salt",
        b"payload",
        redsys_config["shared_secret"],
    )
    assert signature == b"s7tHdh2bWNAW9FM63CTWPJiHzAeJ2VEw9WL+ivAzEb0="


def test_compare_signature():
    assert compare_signatures("12+34g-fpfw!!!", "1234gfpfw") is True
